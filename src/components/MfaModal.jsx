import { useEffect, useState } from 'react';
import Modal from 'components/Modal';
import Button from 'components/Button';
import Stack from 'components/Stack';
import Input from 'components/Input';
import Alert from 'components/Alert';

import { switchblade } from 'lib/switchblade';

import styles from 'styles/MfaModal.module.css';
import Loader from 'components/Loader';

const MfaModal = ({ open, setOpen, onSuccess }) => {
  const [loading, setLoading] = useState(false);
  const [mfaData, setMfaData] = useState({});

  const [otp, setOtp] = useState('');
  const [error, setError] = useState(null);

  const [message, setMessage] = useState(null);

  const beginSetup = async () => {
    if (open) {
      setLoading(true);
      try {
        const response = await switchblade.me.beginMfaSetup();
        setMfaData(response.setup);
      } catch (e) {
        setMessage(e.message ?? 'There was a problem beginning the MFA setup process.');
      } finally {
        setLoading(false);
      }
    }
  }

  const completeMfaSetup = async () => {
    if (otp.length < 6) return;
    try {
      setLoading(true);
      await switchblade.me.completeMfaSetup(otp);
      onSuccess();
      setOtp('');
      setOpen(false);
    } catch (e) {
      setError(e.message ?? 'There was a problem enabling MFA on your account.');
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    if (open) {
      beginSetup()
    } else {
      setMfaData({})
    }
  }, [open])

  return (
    <Modal
      canClose={!loading}
      header="Setup MFA"
      open={open}
      close={() => setOpen(false)}
      footer={message ?
        [<Button
          key="close"
          disabled={loading}
          onClick={() => setOpen(false)}
        >
          Close
        </Button>]
        : [
          <Button
            key="cancel"
            disabled={loading}
            onClick={() => setOpen(false)}
            color={Button.Colors.Red}
          >
            Cancel
          </Button>,
          <Button
            key="save"
            disabled={loading || otp.length < 6}
            onClick={completeMfaSetup}
          >
            Complete Setup
          </Button>
        ]}
    >
      {loading && (
        <Stack>
          <div style={{ margin: '20px 0' }}>
            <Loader size={100} />
          </div>
        </Stack>
      )}

      {message && !loading && (
        <Alert
          title="MFA Error"
          content={message}
        />
      )}

      {!message && !loading && (
        <Stack gap="30px">
          <Stack gap="5px">
            <img src={mfaData?.qrCode} />
            <div style={{ textAlign: 'center' }}>
              Scan the QR code or <a href={mfaData?.url}>click here</a> to add to your MFA app.
            </div>
          </Stack>

          <Stack gap="10px">
            <Input
              block
              style={{ textAlign: 'center', borderColor: !!error && 'red' }}
              placeholder="One-Time Password"
              size={Input.Sizes.Large}
              disabled={loading}
              value={otp}
              onChange={(value) => setOtp(value)}
              autoComplete="one-time-code"
              name="otp"
              inputMode="numeric"
            />
            <div style={{ textAlign: 'center', maxWidth: 300, color: error && 'red' }}>
              {error ?? 'Enter the one-time password generated by your app and save to continue.'}
            </div>
          </Stack>

          <Stack gap={0}>
            <div style={{ fontWeight: 600, fontSize: '1.05em' }}>Neither option working?</div>
            <Stack gap="5px">
              <div>Hover to view and copy your secret:</div>
              <div className={styles.secret}>{mfaData?.secret}</div>
            </Stack>
          </Stack>
        </Stack>
      )}
    </Modal>
  )
}

export default MfaModal;